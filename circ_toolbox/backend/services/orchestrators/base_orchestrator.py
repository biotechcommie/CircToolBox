# circ_toolbox_project/circ_toolbox/backend/services/orchestrators/base_orchestrator.py
from abc import ABC, abstractmethod
from typing import Dict
from circ_toolbox.backend.utils.logging_config import get_logger

class BaseStepOrchestrator(ABC):
    """
    Abstract base class for all pipeline step orchestrators.
    
    This class combines abstract methods with pre- and post-execution hooks.
    Each orchestrator must implement the `_execute_core` method.
    """
    
    def __init__(self):
        # Initialize the logger with the name of the derived class.
        self.logger = get_logger(self.__class__.__name__)
    
    def validate_inputs(self):
        """
        Validate input data. This method can be overridden by subclasses.
        """
        pass
    
    def _pre_execute(self):
        """
        Logic to be executed before the core execution. This method can be overridden by subclasses.
        """
        self.logger.info("Starting execution of the orchestrator.")
    
    @abstractmethod
    def _execute_core(self, parameters: Dict, input_data: Dict) -> Dict:
        """
        Core execution logic to be implemented by subclasses.
        
        Args:
            parameters (Dict): Configuration parameters for this step.
            input_data (Dict): Input data for processing.
        
        Returns:
            Dict: Output data generated by this step.
        """
        pass
    
    def _post_execute(self, result: Dict):
        """
        Logic to be executed after the core execution. This method can be overridden by subclasses.
        
        Args:
            result (Dict): Result of the core execution.
        """
        self.logger.info("Execution completed successfully.")
    
    def execute(self, parameters: Dict, input_data: Dict) -> Dict:
        """
        Main execution method. This method orchestrates the execution flow.
        
        Args:
            parameters (Dict): Configuration parameters for this step.
            input_data (Dict): Input data for processing.
        
        Returns:
            Dict: Output data generated by this step.
        """
        self.validate_inputs()
        self._pre_execute()
        result = self._execute_core(parameters, input_data)
        self._post_execute(result)
        return result

'''

sequenceDiagram
    participant API
    participant Orchestrator
    participant Celery
    participant Database
    participant StepOrchestrator
    
    API->>Orchestrator: POST /pipelines/{id}/run
    Orchestrator->>Database: Validate pipeline & steps
    Orchestrator->>Celery: Create execution chain
    Celery->>StepOrchestrator: Execute Step 1
    StepOrchestrator->>Database: Update step status
    StepOrchestrator->>Celery: Return output data
    Celery->>StepOrchestrator: Execute Step 2 (with previous output)
    StepOrchestrator->>Database: Update step status
    loop Until last step
        Celery->>StepOrchestrator: Execute next step
    end
    Celery->>Database: Mark pipeline complete
'''